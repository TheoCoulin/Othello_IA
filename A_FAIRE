A modifier :

Dans la classe board :
	- Mettre le nombre de pièces (qui est dans la classe game). (Pour plus tard ajouter un 
attribut nb de pièces jouées, pour pouvoir faire nbPieces - nbBLACK = nbWHITE) 		----------- FAIT (Pas l'attribut) 
	- Mettre le updateBoard (qui est dans la classe play) et modifier. 							----------- FAIT (dans la classe game).

Dans la classe play: 
	- Bizarre. Ajouter les fonctions play et undo de l'IA.
	- Voir la structure à utiliser pour garder les coups en mémoire et pouvoir naviguer dans 
l'arbre. 
	- Faire une fonction permettant d'avoir tous les moves
possibles depuis l'etat courant du board.

	POSSIBILITES pour le undo : au debut de la fonction play de l'ai, creer une copie du baord. Dans la fonction, on fait le move donné,
	donc on update le board du jeu, puis on appelle minimax.
	Juste apres, on remet le board comme avant !
	OU ALORS, stocker les coordonnees du pion placé et celle des pions qui ont servi à prendre des pions adverses (plus compliqué).
	---> https://coderanch.com/t/200906/java/Reversi-Othello : la réponse de Warren Dew, et celle de Jessica Sant, la plus compliquéé.
	---> http://www.geeksforgeeks.org/minimax-algorithm-in-game-theory-set-3-tic-tac-toe-ai-finding-optimal-move/ : Utile pour comprendre le fonctionnement de la fonction play() qu'on a à faire.



/!\ - Que faire de ce qui est dans la classe play ???????? Une classe moves ? Pour y mettre la 
sdd de gardage en mémoire des coups tavu. 			---------- FAIT la création de la classe moves (avec un s sinon car un move existe déjà en C++)
